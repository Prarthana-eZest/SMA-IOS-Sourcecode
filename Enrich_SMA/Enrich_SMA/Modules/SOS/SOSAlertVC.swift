//
//  SOSAlertViewController.swift
//  Enrich_SMA
//
//  Created by Harshal on 03/04/20.
//  Copyright (c) 2020 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SOSAlertDisplayLogic: class {
    func displaySuccess<T: Decodable> (viewModel: T)
    func displayError(errorMessage: String?)
}

class SOSAlertVC: UIViewController, SOSAlertDisplayLogic {
    var interactor: SOSAlertBusinessLogic?

    @IBOutlet weak private var profilePicture: UIImageView!
    @IBOutlet weak private var lblUserName: UILabel!
    @IBOutlet weak private var lblLevel: UILabel!
    @IBOutlet weak private var btnMobileNo: UIButton!
    @IBOutlet weak private var lblAddress: UILabel!
    @IBOutlet weak private var txtfMessage: UITextField!
    @IBOutlet weak private var btnOk: UIButton!

    var viewDismissBlock: ((Bool) -> Void)?

    var alertData: Notifications.MyNotificationList.MyNotificationListItems?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = SOSAlertInteractor()
        let presenter = SOSAlertPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        getusershell()
        txtfMessage.delegate = self
        [txtfMessage].forEach({ $0.addTarget(self, action: #selector(editingChanged), for: .editingChanged) })
        configureUI()
    }

    override func viewWillAppear(_ animated: Bool) {
           super.viewWillAppear(animated)
           self.navigationController?.navigationBar.isHidden = true
        KeyboardAnimation.sharedInstance.beginKeyboardObservation(self.view)
       }

       override func viewWillDisappear(_ animated: Bool) {
           super.viewWillDisappear(animated)
           KeyboardAnimation.sharedInstance.endKeyboardObservation()
       }

    func configureUI() {
        if let alertData = alertData,
            let technicianData = alertData.data {
            lblUserName.text = technicianData.technician_name ?? ""
            lblLevel.text = technicianData.designation ?? "-"
            btnMobileNo.setTitle(String(describing: technicianData.technician_contact ?? ""), for: .normal)
            lblAddress.text = technicianData.address ?? ""
        }
        else {
            print("Unable to parse data")
            viewDismissBlock?(false)
            self.dismiss(animated: true, completion: nil)
        }
    }

    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(true)
        viewDismissBlock?(false)
    }

    @IBAction func actionMobileNo(_ sender: UIButton) {
        if let text = btnMobileNo.titleLabel?.text {
            text.makeACall()
        }
    }

    @IBAction func actionOK(_ sender: UIButton) {
        if btnOk.isEnabled {
            sendSOSFeedback()
        }
    }

    func getJSONFromString(string: String) -> [String: Any]? {
        if let data = string.data(using: .utf8) {
            do {
                if let jsonArray = try JSONSerialization.jsonObject(with: data, options: .allowFragments) as? [String: Any] {
                    print(jsonArray)
                    return jsonArray
                }
                else {
                    print("bad json")
                    return nil
                }
            }
            catch let error as NSError {
                print(error)
                return nil
            }
        }
        return nil
    }
}

// MARK: Call Webservice
extension SOSAlertVC {

    func sendSOSFeedback() {
        if let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self, forKey: UserDefauiltsKeys.k_Key_LoginUser),
            let alertData = alertData,
            let technicianData = alertData.data,
            let technicianId = technicianData.technician_id {
            EZLoadingActivity.show("Loading...", disableUI: true)
            let request = SOSAlert.SendFeedback.Request(employee_id: "\(technicianId)", message: txtfMessage.text ?? "", sent_by_id: userData.employee_id ?? "", is_custom: 1, acknowledgedNotificationId: alertData.notification_id ?? "")
            interactor?.doPostSendSOSFeedback(request: request, method: .post)
        }
    }

    func displaySuccess<T: Decodable>(viewModel: T) {
        EZLoadingActivity.hide()
        if let model = viewModel as? SOSAlert.SendFeedback.Response,
            model.status == true {
            viewDismissBlock?(true)
            self.dismiss(animated: true, completion: nil)
        }
    }

    func displayError(errorMessage: String?) {
        EZLoadingActivity.hide()
        DispatchQueue.main.async { [unowned self] in
            self.showAlert(alertTitle: alertTitle, alertMessage: errorMessage ?? "")
        }
    }
}

extension SOSAlertVC: UITextFieldDelegate {

    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }

    func textFieldShouldEndEditing(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }
}

extension SOSAlertVC {
    @objc func editingChanged(_ textField: UITextField) {
        btnOk.isEnabled = false
        let message = (txtfMessage.text ?? "").trim()
        if !message.isEmpty {
            btnOk.isEnabled = true
        }
    }
}
