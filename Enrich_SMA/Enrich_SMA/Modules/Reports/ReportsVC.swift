//
//  ReportsViewController.swift
//  Enrich_SMA
//
//  Created by Harshal Patil on 22/10/19.
//  Copyright (c) 2019 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ReportsDisplayLogic: class {
    func displaySuccess<T: Decodable> (viewModel: T)
    func displayError(errorMessage: String?)
}

class ReportsModel {
    let category: Reports.GetReports.Category
    var isSelected: Bool

    init(category: Reports.GetReports.Category, isSelected: Bool) {
        self.category = category
        self.isSelected = isSelected
    }
}

class ReportsVC: UIViewController, ReportsDisplayLogic {

    var interactor: ReportsBusinessLogic?

    var reports = [ReportsModel]()

    @IBOutlet weak private var tableView: UITableView!

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = ReportsInteractor()
        let presenter = ReportsPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        tableView.register(UINib(nibName: CellIdentifier.reportCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.reportCell)
        tableView.separatorInset = UIEdgeInsets(top: 0, left: UIScreen.main.bounds.width, bottom: 0, right: 0)
        showNavigationBarButtons()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.navigationBar.isHidden = false
        getReports()
    }

    func showNavigationBarButtons() {

        let reportsButton = UIBarButtonItem(title: "Reports", style: .plain, target: self, action: #selector(didTapRevenueButton))
        reportsButton.tintColor = UIColor(red: 0.15, green: 0.15, blue: 0.15, alpha: 1)
        navigationItem.title = ""
        navigationItem.leftBarButtonItems = [reportsButton]
    }

    @objc func didTapRevenueButton() {
    }
}

extension ReportsVC: UITableViewDelegate, UITableViewDataSource {

    func numberOfSections(in tableView: UITableView) -> Int {
        return reports.count
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if reports[section].isSelected {
            return (reports[section].category.links?.count ?? 0) + 1
        }
        else {
            return 1
        }
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {

        guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.reportCell, for: indexPath) as? ReportCell else {
            return UITableViewCell()
        }
        let category = reports[indexPath.section]
        let title: String
        if indexPath.row == 0 {
            title = category.category.categoryName ?? ""
        }
        else {
            title = category.category.links?[indexPath.row - 1].type ?? ""
        }
        cell.configureCell(title: title,
                           isHeader: indexPath.row == 0,
                           isSelected: category.isSelected)
        cell.selectionStyle = .none
        cell.separatorInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
        return cell

    }

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        print("Selection")

        if indexPath.row == 0 {
            let isSelected = reports[indexPath.section].isSelected
            reports.forEach { $0.isSelected = false }
            reports[indexPath.section].isSelected = !isSelected
            tableView.reloadData()
        }
        else {
            guard let links = reports[indexPath.section].category.links else {
                return
            }
            let vc = PowerBIReportVC.instantiate(fromAppStoryboard: .Reports)
            vc.data = links[indexPath.row - 1]
            self.navigationController?.pushViewController(vc, animated: true)

//            guard let links = reports[indexPath.section].category.links,
//            let urlString = links[indexPath.row - 1].url,
//            let url = URL(string: urlString) else { return }
//            UIApplication.shared.open(url)
        }
    }
}

extension ReportsVC {

    func getReports() {
        EZLoadingActivity.show("Loading...", disableUI: true)
        let request = Reports.GetReports.Request()
        interactor?.doGetReports(request: request, method: .post)
    }

    func displaySuccess<T>(viewModel: T) where T: Decodable {
        EZLoadingActivity.hide()
        print("Response: \(viewModel)")

        if let model = viewModel as? Reports.GetReports.Response {
            reports.removeAll()
            model.data?.forEach {
                reports.append(ReportsModel(category: $0, isSelected: false))
            }
            tableView.reloadData()
        }
    }

    func displayError(errorMessage: String?) {
        EZLoadingActivity.hide()
        print("Failed: \(errorMessage ?? "")")
        showAlert(alertTitle: alertTitle, alertMessage: errorMessage ?? "Request Failed")
    }
}
