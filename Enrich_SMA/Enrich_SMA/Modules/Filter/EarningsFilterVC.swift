//
//  EarningsFilterViewController.swift
//  Enrich_TMA
//
//  Created by Harshal on 17/08/21.
//  Copyright (c) 2021 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EarningsFilterDisplayLogic: class
{
    func displaySomething(viewModel: EarningsFilter.Something.ViewModel)
}

enum ServiceGender {
    static let male = "Male"
    static let female = "Female"
    static let others = "Others"
}

enum CategoryTree {
    static let category = "main_category_label"
    static let subCategory = "sub_category_name"
}

class EarningsFilterVC: UIViewController, EarningsFilterDisplayLogic
{
    var interactor: EarningsFilterBusinessLogic?
    
    @IBOutlet weak private var categoryTableView: UITableView!
    @IBOutlet weak private var subCategoryTableView: UITableView!
    @IBOutlet weak private var parentView: UIView!

    var viewDismissBlock: ((_ status: Bool, _ filterToApply: [String: String]) -> Void)?
    
    var data = [EarningsCatgoryFilterModel]()
    
    var selectedCategoryIndex = 0

    var selectedFilters = ["gender": "All Genders", "category": "All Categories", "subCategory": "All Categories"]
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = EarningsFilterInteractor()
        let presenter = EarningsFilterPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        
        categoryTableView.register(UINib(nibName: CellIdentifier.earningCategoryFilterCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.earningCategoryFilterCell)
        subCategoryTableView.register(UINib(nibName: CellIdentifier.packageFilterCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.packageFilterCell)
        parentView.clipsToBounds = true
        parentView.layer.cornerRadius = 8
        parentView.layer.maskedCorners = [.layerMinXMinYCorner, .layerMaxXMinYCorner]
        categoryTableView.separatorColor = .clear
        subCategoryTableView.separatorColor = .clear
        categoryTableView.tag = 0
        subCategoryTableView.tag = 1
        /*
        let sub1 = [EarningsSubCatgoryFilterModel(subCategory: "Male", isSelected: false), EarningsSubCatgoryFilterModel(subCategory: "Female", isSelected: false), EarningsSubCatgoryFilterModel(subCategory: "Other", isSelected: false)]
        data.append(EarningsCatgoryFilterModel(category: "Gender", isSelected: true, subCategories: sub1))
        
        let sub2 = [EarningsSubCatgoryFilterModel(subCategory: "Service", isSelected: false), EarningsSubCatgoryFilterModel(subCategory: "Product", isSelected: false)]
        data.append(EarningsCatgoryFilterModel(category: "Category", isSelected: false, subCategories: sub2))
        
        let sub3 = [EarningsSubCatgoryFilterModel(subCategory: "All Categories", isSelected: false), EarningsSubCatgoryFilterModel(subCategory: "Hair Cut", isSelected: false), EarningsSubCatgoryFilterModel(subCategory: "Hair Styling", isSelected: false), EarningsSubCatgoryFilterModel(subCategory: "Hair Colour", isSelected: false), EarningsSubCatgoryFilterModel(subCategory: "Hair Wash", isSelected: false)]
        data.append(EarningsCatgoryFilterModel(category: "Sub-category", isSelected: false, subCategories: sub3))
        
        let sub4 = [EarningsSubCatgoryFilterModel(subCategory: "General", isSelected: false), EarningsSubCatgoryFilterModel(subCategory: "Gold", isSelected: false), EarningsSubCatgoryFilterModel(subCategory: "Silver", isSelected: false), EarningsSubCatgoryFilterModel(subCategory: "Platinum", isSelected: false)]
        data.append(EarningsCatgoryFilterModel(category: "Membership", isSelected: false, subCategories: sub4))*/
        
        createFilters()
    }
    
    // MARK: Do something
    
    func createFilters(){
        data.removeAll()
        let technicianDataJSON = UserDefaults.standard.value(Dashboard.GetRevenueDashboard.Response.self, forKey: UserDefauiltsKeys.k_key_RevenueDashboard)

         let category = technicianDataJSON?.data?.filters?.category_tree
        
        var categoryData = [EarningsSubCatgoryFilterModel]()
        var subCategoryData = [EarningsSubCatgoryFilterModel]()
        
        let selectedCategory = selectedFilters["category"]
        categoryData.append(contentsOf: ( [EarningsSubCatgoryFilterModel(subCategory: "All Categories", isSelected: (selectedCategory == "All Categories"))]))
        
        let selectedSubCategory = selectedFilters["subCategory"]
        subCategoryData.append(contentsOf: ( [EarningsSubCatgoryFilterModel(subCategory: "All Categories", isSelected: (selectedSubCategory == "All Categories"))]))
        
        for objCategory in category! {
            categoryData.append(contentsOf: [EarningsSubCatgoryFilterModel(subCategory: objCategory.main_category_label ?? "", isSelected: (selectedCategory == objCategory.main_category_label))])
            
            for objSubCategoryArr in objCategory.sub_categories!{
                if isCategoryAlreadySelected() {
                    if objCategory.main_category_label == selectedCategory {
                        subCategoryData.append(contentsOf:[EarningsSubCatgoryFilterModel(subCategory: objSubCategoryArr.sub_category_name ?? "", isSelected: (selectedSubCategory == objSubCategoryArr.sub_category_name))])
                    }
                } else {
                    subCategoryData.append(contentsOf:[EarningsSubCatgoryFilterModel(subCategory: objSubCategoryArr.sub_category_name ?? "", isSelected: (selectedSubCategory == objSubCategoryArr.sub_category_name))])
                }
            }
        }
        
        data.append(EarningsCatgoryFilterModel(category: "Category", isSelected: true, subCategories: categoryData))
        
        data.append(EarningsCatgoryFilterModel(category: "Sub-category", isSelected: false, subCategories: subCategoryData))
        
        let selectedGender = selectedFilters["gender"]

        let sub1 = [EarningsSubCatgoryFilterModel(subCategory: "All Genders", isSelected: (selectedGender == "All Genders")), EarningsSubCatgoryFilterModel(subCategory: "Male", isSelected: (selectedGender == "Male")), EarningsSubCatgoryFilterModel(subCategory: "Female", isSelected: (selectedGender == "Female")), EarningsSubCatgoryFilterModel(subCategory: "Others", isSelected: (selectedGender == "Others"))]
        data.append(EarningsCatgoryFilterModel(category: "Gender", isSelected: false, subCategories: sub1))
        
        categoryTableView.reloadData()
        subCategoryTableView.reloadData()
    }
    
    private func isCategoryAlreadySelected() -> Bool {
        if let selCategory = selectedFilters["category"], !selCategory.isEmpty && selCategory != "All Categories" {
            return true
        }
        return false
    }
    
    func doSomething()
    {
        let request = EarningsFilter.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: EarningsFilter.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    @IBAction func actionClose(_ sender: UIButton) {
        self.dismiss(animated: true, completion: nil)
        viewDismissBlock?(false,[:])
    }
    @IBAction func actionApplyFilter(_ sender: UIButton) {
        self.dismiss(animated: true, completion: nil)
        for objSelected in data {
            if(objSelected.category == "Gender"){
                for objGender in objSelected.subCategories! {
                    if(objGender.isSelected == true){
                                print("Selected Gender \(objGender.subCategory)")
                        selectedFilters["gender"] = objGender.subCategory
                }
                }
                
            }
            
            if(objSelected.category == "Category"){
                for objCategory in objSelected.subCategories! {
                    if(objCategory.isSelected == true){
                                print("Selected Category \(objCategory.subCategory)")
                        selectedFilters["category"] = objCategory.subCategory
                }
                }
            }

            if(objSelected.category == "Sub-category"){
                for objSubCategory in objSelected.subCategories! {
                    if(objSubCategory.isSelected == true){
                                print("Selected Category \(objSubCategory.subCategory)")
                        selectedFilters["subCategory"] = objSubCategory.subCategory
                }
                }
            }
            
            
        }
        
        
        viewDismissBlock?(true,selectedFilters)
    }
    
    @IBAction func actionClearFilters(_ sender: UIButton) {
        selectedFilters = ["gender": "All Genders", "category": "All Categories", "subCategory": "All Categories"]
        selectedCategoryIndex = 0
        createFilters()
    }
}

extension EarningsFilterVC: UITableViewDelegate, UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if tableView.tag == 0 {
            return data.count
        }
        else {
            return data[selectedCategoryIndex].subCategories?.count ?? 0
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        if tableView.tag == 0 {
            guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.earningCategoryFilterCell, for: indexPath) as? EarningCategoryFilterCell else {
                return UITableViewCell()
            }
            
            let showLowerCorner = indexPath.row == selectedCategoryIndex - 1 ? true : false
            let showUpperCorner = indexPath.row == selectedCategoryIndex + 1 ? true : false

            cell.configureCell(model: data[indexPath.row], showUpperCorner: showUpperCorner, showLowerCorner: showLowerCorner)
            cell.selectionStyle = .none
            return cell
        }
        else {
            guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.packageFilterCell, for: indexPath) as? PackageFilterCell else {
                return UITableViewCell()
            }
            if let subCategory = data[selectedCategoryIndex].subCategories?[indexPath.row] {
                cell.configureCell(model: subCategory)
            }
            cell.selectionStyle = .none
            return cell
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return tableView.tag == 0 ? 55 : 40
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        print("Selection")
        if tableView.tag == 0 {
            selectedCategoryIndex = indexPath.row
            data.forEach{$0.isSelected = false}
            data[indexPath.row].isSelected = true
        }
        else {
            data[selectedCategoryIndex].subCategories?.forEach{$0.isSelected = false}
            data[selectedCategoryIndex].subCategories?[indexPath.row].isSelected = true
            if selectedCategoryIndex == 0 {
                let selectedCategory = data[selectedCategoryIndex].subCategories?[indexPath.row].subCategory
                if selectedCategory != selectedFilters["category"] { // refreshing sub-category, if category changed
                    selectedFilters["category"] = data[selectedCategoryIndex].subCategories?[indexPath.row].subCategory
                    //reset sub-category
                    selectedFilters["subCategory"] = "All Categories"
                    createFilters()
                }
                return
            } else if selectedCategoryIndex == 1 {
                selectedFilters["subCategory"] = data[selectedCategoryIndex].subCategories?[indexPath.row].subCategory
            } else if selectedCategoryIndex == 2 {
                selectedFilters["gender"] = data[selectedCategoryIndex].subCategories?[indexPath.row].subCategory
            }
        }
        categoryTableView.reloadData()
        subCategoryTableView.reloadData()
    }
}
