//
//  TechnicianDashboardViewController.swift
//  Enrich_SMA
//
//  Created by Harshal on 24/01/22.
//  Copyright (c) 2022 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum CategoryTypes {
    static let services = "Services"
    static let packages = "Packages"
    static let retail = "Retail"
}

enum AppointmentTypes {
    static let salon = "salon"
    static let home = "home"
}

enum platform {
    static let store = "store"
    static let CMA = "CMA"
    
}

protocol TechnicianDashboardDisplayLogic: class
{
  func displaySomething(viewModel: TechnicianDashboard.Something.ViewModel)
}

class TechnicianDashboardViewController: UIViewController, TechnicianDashboardDisplayLogic
{
    
    @IBOutlet weak var collectionView: UICollectionView!
    
  var interactor: TechnicianDashboardBusinessLogic?
  var router: (NSObjectProtocol & TechnicianDashboardRoutingLogic & TechnicianDashboardDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = TechnicianDashboardInteractor()
    let presenter = TechnicianDashboardPresenter()
    let router = TechnicianDashboardRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
    self.collectionView.register(UINib(nibName: "DashboardGridCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "DashboardGridCollectionViewCell")
  }
  
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.navigationBar.isHidden = false
        AppDelegate.OrientationLock.lock(to: UIInterfaceOrientationMask.portrait, andRotateTo: UIInterfaceOrientation.portrait)
        self.navigationController?.addCustomBackButton(title: "Back")
        addFilterButtonOnRight(imageName: "filterGrid")
        
    }
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = TechnicianDashboard.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: TechnicianDashboard.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
}

extension TechnicianDashboardViewController : UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout{
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 8
    }
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "DashboardGridCollectionViewCell", for: indexPath) as! DashboardGridCollectionViewCell
            
            cell.configureSection(currentIndex: indexPath.row, income: 50000)
            
            return cell
        
        
    }
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        
            let noOfCellsInRow = 2
            
            let flowLayout = collectionViewLayout as! UICollectionViewFlowLayout
            let totalSpace = flowLayout.sectionInset.left
            + flowLayout.sectionInset.right
            + (flowLayout.minimumInteritemSpacing * CGFloat(noOfCellsInRow - 1))
            let size = Int((collectionView.bounds.width - totalSpace) / CGFloat(noOfCellsInRow))
            
            return CGSize(width: size, height: size)
    
        
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        
    }
    
}
