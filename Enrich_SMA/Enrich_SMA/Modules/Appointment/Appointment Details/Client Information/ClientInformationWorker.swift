//
//  ClientInformationWorker.swift
//  Enrich_TMA
//
//  Created by Harshal Patil on 08/11/19.
//  Copyright (c) 2019 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class ClientInformationWorker
{
    let networkLayer = NetworkLayerAlamofire() // Uncomment this in case do request using Alamofire for client request
    var presenter: ClientInformationPresentationLogic?
    
    func postRequestForAppointmentHistory(request:ClientInformation.GetAppointnentHistory.Request, method: HTTPMethod) {
        
        let errorHandler: (String) -> Void = { (error) in
            print(error)
            self.presenter?.presentError(responseError: error)
        }
        let successHandler: (ClientInformation.GetAppointnentHistory.Response) -> Void = { (response) in
            print(response)
            self.presenter?.presentGetAppointmentHistorySuccess(response: response)
        }
        
        self.networkLayer.post(urlString: ConstantAPINames.getAppointments.rawValue, body: request, headers: ["X-Request-From": "tma"], successHandler: successHandler, errorHandler: errorHandler, method: method)
    }
    
    func getRequestForMembershipDetails(accessToken:String, method: HTTPMethod,request: ClientInformation.MembershipDetails.Request) {
        
        let errorHandler: (String) -> Void = { (error) in
            print(error)
            self.presenter?.presentError(responseError: error)
        }
        
        let successHandler: (ClientInformation.MembershipDetails.Response) -> Void = { (employees) in
            print(employees)
            let response = employees
            self.presenter?.presentGetMembershipDetailsSuccess(response: response)
        }
        
        self.networkLayer.post(urlString: ConstantAPINames.membershipDetails.rawValue, body: request, headers: ["Authorization": "Bearer \(accessToken)"], successHandler: successHandler, errorHandler: errorHandler, method: method)
    }
    
}
