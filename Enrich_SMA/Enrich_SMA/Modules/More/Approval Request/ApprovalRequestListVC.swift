//
//  ApprovalRequestListViewController.swift
//  Enrich_TMA
//
//  Created by Harshal Patil on 09/03/20.
//  Copyright (c) 2020 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ApprovalRequestListDisplayLogic: class {
    func displaySuccess<T: Decodable> (viewModel: T)
    func displayError(errorMessage: String?)
}

class ApprovalRequestListVC: UIViewController, ApprovalRequestListDisplayLogic {
    var interactor: ApprovalRequestListBusinessLogic?

    @IBOutlet weak private var tableView: UITableView!
    @IBOutlet weak private var lblNoRequest: UILabel!
    
    // MARK: Object lifecycle

    var requestList = [ApprovalRequestList.GetRequestData.Data]()

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = ApprovalRequestListInteractor()
        let presenter = ApprovalRequestListPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        tableView.register(UINib(nibName: CellIdentifier.approvalRequestCell, bundle: nil),
                           forCellReuseIdentifier: CellIdentifier.approvalRequestCell)
        tableView.separatorInset = UIEdgeInsets(top: 0, left: tableView.frame.size.width, bottom: 0, right: 0)
        getApprovalList()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.navigationBar.isHidden = false
        AppDelegate.OrientationLock.lock(to: UIInterfaceOrientationMask.portrait,
                                         andRotateTo: UIInterfaceOrientation.portrait)
        self.navigationController?.addCustomBackButton(title: "Approval Request")
    }
}
extension ApprovalRequestListVC: ApprovalCellDelegate {

    func actionDeny(indexPath: IndexPath) {
        let vc = DenyReasonVC.instantiate(fromAppStoryboard: .More)
        self.view.alpha = screenPopUpAlpha
        self.present(vc, animated: true, completion: nil)

        vc.onDoneBlock = { [unowned self] (result, reason) in
            // Do something
            if result {
                self.processRequestAPICall(
                    type: ApprovalStatus.approved.rawValue,
                    indexPath: indexPath, reason: reason)
            }
            self.view.alpha = 1.0
        }
    }

    func actionApprove(indexPath: IndexPath) {
        processRequestAPICall(type: ApprovalStatus.approved.rawValue,
                       indexPath: indexPath, reason: nil)
    }
}

extension ApprovalRequestListVC: UITableViewDelegate, UITableViewDataSource {

    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        lblNoRequest.isHidden = !requestList.isEmpty
        return requestList.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {

        guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.approvalRequestCell, for: indexPath) as? ApprovalRequestCell else {
            return UITableViewCell()
        }

        let requestDetails = requestList[indexPath.row]
        cell.indexPath = indexPath
        cell.delegate = self
        cell.configureCell(model: requestDetails)
        cell.separatorInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
        cell.selectionStyle = .none
        return cell
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    }

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
}

// MARK: Call Webservice
extension ApprovalRequestListVC {

    func getApprovalList() {
        if let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self, forKey: UserDefauiltsKeys.k_Key_LoginUser) {
            EZLoadingActivity.show("Loading...", disableUI: true)
            let salonData = ApprovalRequestList.GetRequestData.SalonDetails(salon_id: userData.salon_id)
            let request = ApprovalRequestList.GetRequestData.Request(addData: salonData, is_custom: true)
            interactor?.doPostGetApprovalList(request: request, method: .post)
        }
    }

    func processRequestAPICall(type: String, indexPath: IndexPath, reason: String?) {

        if let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self, forKey: UserDefauiltsKeys.k_Key_LoginUser) {
            EZLoadingActivity.show("Loading...", disableUI: true)
            let requestDetails = requestList[indexPath.row]
            let requestData = ApprovalRequestList.ProcessRequest.RequestDetails(
                status: type, ref_id: requestDetails.ref_id,
                category: requestDetails.category, employee_id: userData.employee_id,
                module_name: requestDetails.module_name, reason: reason)
            let request = ApprovalRequestList.ProcessRequest.Request(addData: requestData, is_custom: true)
            interactor?.doPostProcessApproval(request: request, method: .post)
        }
    }

    func displaySuccess<T: Decodable>(viewModel: T) {
        EZLoadingActivity.hide()
        if let model = viewModel as? ApprovalRequestList.GetRequestData.Response {
            if model.status == true {
                requestList.removeAll()
                requestList.append(contentsOf: model.data ?? [])
                requestList.sort {
                    return ($0.updated_at ?? "").lowercased() > ($1.updated_at ?? "").lowercased()
                }

                self.tableView.reloadData()
            }
            else {
                self.showAlert(alertTitle: alertTitle, alertMessage: model.message ?? "")
            }
        }
        else if let model = viewModel as? ApprovalRequestList.ProcessRequest.Response {
            self.showAlert(alertTitle: alertTitle, alertMessage: model.message ?? "")
        }
    }
    func displayError(errorMessage: String?) {
        EZLoadingActivity.hide()
        DispatchQueue.main.async { [unowned self] in
            self.showAlert(alertTitle: alertTitle, alertMessage: errorMessage ?? "")
        }
    }
}
