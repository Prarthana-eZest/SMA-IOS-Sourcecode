//
//  NotificationsViewController.swift
//  Enrich_TMA
//
//  Created by Harshal Patil on 09/10/19.
//  Copyright (c) 2019 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NotificationsDisplayLogic: class {
    func displaySuccess<T: Decodable> (viewModel: T)
    func displayError(errorMessage: String?)
}

class NotificationsVC: UIViewController, NotificationsDisplayLogic {
    var interactor: NotificationsBusinessLogic?

    @IBOutlet weak private var tableView: UITableView!

    private var arrNotificationList = [Notifications.MyNotificationList.MyNotificationListItems]()

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = NotificationsInteractor()
        let presenter = NotificationsPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        callToGetNotificationList()
        tableView.register(UINib(nibName: CellIdentifier.notificationDetailsCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.notificationDetailsCell)
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.navigationBar.isHidden = false
        AppDelegate.OrientationLock.lock(to: UIInterfaceOrientationMask.portrait, andRotateTo: UIInterfaceOrientation.portrait)
        self.navigationController?.addCustomBackButton(title: "Notifications")
    }

    // MARK: Do something

    func callToGetNotificationList() {
        EZLoadingActivity.show("Loading...", disableUI: true)
        interactor?.getNotifications()
    }

}

extension NotificationsVC {

    func displaySuccess<T: Decodable>(viewModel: T) {
        EZLoadingActivity.hide()
        if let model = viewModel as? Notifications.MyNotificationList.Response {
            if let status = model.status, status == true {
                arrNotificationList.removeAll()
                arrNotificationList = model.data ?? []
                self.tableView.reloadData()
            }
            else // Failure
            {
                self.showToast(alertTitle: alertTitle, message: model.message ?? "", seconds: toastMessageDuration)
            }
        }
    }
    func displayError(errorMessage: String?) {
        EZLoadingActivity.hide()
        self.showAlert(alertTitle: alertTitle, alertMessage: errorMessage ?? "")
    }

}

extension NotificationsVC: UITableViewDelegate, UITableViewDataSource {

    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return arrNotificationList.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {

        guard let notificationCell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.notificationDetailsCell, for: indexPath) as? NotificationDetailsCell else {
            return UITableViewCell()
        }
        notificationCell.separatorInset = UIEdgeInsets(top: 0, left: is_iPAD ? 30 : 20, bottom: 0, right: is_iPAD ? 30 : 20)
        notificationCell.selectionStyle = .none
        notificationCell.configureNotification(model: arrNotificationList[indexPath.row])

        return notificationCell
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {

    }

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
}
